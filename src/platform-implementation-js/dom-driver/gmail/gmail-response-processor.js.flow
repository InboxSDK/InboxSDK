/* @flow */

declare export function interpretSentEmailResponse(
  responseString: string
): { threadID: string, messageID: string };

declare export function extractGmailMessageIdFromSentEmail(
  emailSentArray: any
): ?string;

declare export function extractGmailThreadIdFromSentEmail(
  emailSentArray: any
): ?string;
declare export function extractGmailThreadIdFromMessageIdSearch(
  responseString: string
): ?string;
declare export function rewriteSingleQuotes(s: string): string;

export type MessageOptions = {
  includeLengths: boolean,
  suggestionMode: boolean,
  noArrayNewLines: boolean,
  includeExplicitNulls: boolean
};

declare export function deserialize(
  threadResponseString: string
): { value: any[], options: MessageOptions };

declare export function deserializeArray(value: string): any[];

declare export function serialize(value: any[], options: MessageOptions): string;

export type Thread = {
  subject: string,
  shortDate: string,
  timeString: string,
  peopleHtml: string,
  timestamp: number,
  isUnread: boolean,
  lastEmailAddress: ?string,
  bodyPreviewHtml: string,
  someGmailMessageIds: string[],
  gmailThreadId: string
};

declare export function readDraftId(response: string, messageID: string): ?string;
declare export function replaceThreadsInResponse(
  response: string,
  replacementThreads: Thread[],
  { start: number, total?: number | 'MANY' }
): string;

declare export function extractThreads(response: string): Thread[];
declare export function extractThreadsFromDeserialized(value: any[]): Thread[];

declare export function extractMessageIdsFromThreadBatchRequest(
  response: string
): { [threadId: string]: string };

declare export function cleanupPeopleLine(peopleHtml: string): string;

export type Message = {
  date: number,
  messageID?: string,
  recipients?: Array<{
    emailAddress: string,
    name: ?string
  }>
};

declare export function extractMessages(
  response: string
): Array<{ threadID: string, messages: Message[] }>;
