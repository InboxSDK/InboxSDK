/* @flow */

import type { AutocompleteSearchResultWithId } from '../../../injected-js/gmail/modify-suggestions';
import CommonPageCommunicator from '../../lib/common-page-communicator';

import Kefir from 'kefir';

// This is intended to be instantiated from makeXhrInterceptor, since it depends
// on the injected script, and if it's not instantiated elsewhere, you know that
// if you have an instance of this, then the injected script is present and this
// will work.
declare export default class GmailPageCommunicator extends CommonPageCommunicator {
  getMessageDate(
    threadId: string,
    message: HTMLElement
  ): Promise<?number>;
  getMessageRecipients(
    threadId: string,
    message: HTMLElement
  ): Promise<?Array<{ emailAddress: string, name: ?string }>>;
  getThreadIdForThreadRowByDatabase(threadRow: HTMLElement): ?string;
  getThreadIdForThreadRowByClick(threadRow: HTMLElement): ?string;
  getCurrentThreadID(
    threadContainerElement: HTMLElement,
    isPreviewedThread?: boolean
  ): string;
  getUserOriginalPreviewPaneMode(): ?string;
  getActionTokenValue(): string;
  isUsingSyncAPI(): boolean;
  isConversationViewDisabled(): Promise<boolean>;
  registerSuggestionsModifier(providerID: string): void;
  provideAutocompleteSuggestions(
    providerID: string,
    query: string,
    suggestions: AutocompleteSearchResultWithId[]
  ): void;
  setupCustomListResultsQuery(query: string): void;
  setCustomListNewQuery(detail: {
    query: string,
    start: number,
    newQuery: string,
    newStart: number
  }): void;
  setCustomListResults(query: string, newResults: string | null): void;
  createCustomSearchTerm(term: string): void;
  setSearchQueryReplacement(query: string, newQuery: string): void;
  registerComposeRequestModifier(keyId: string, appId: string): string;
  unregisterComposeRequestModifier(keyId: string, modifierId: string): void;
  modifyComposeRequest(
    keyId: string,
    modifierId: string,
    composeParams: Object
  ): void;
}
